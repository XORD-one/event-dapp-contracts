/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DaoEventsV2Interface extends ethers.utils.Interface {
  functions: {
    "addtoWhiteList(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyTicket(tuple,address)": FunctionFragment;
    "changeToken(address)": FunctionFragment;
    "createEvent(tuple)": FunctionFragment;
    "eventIds()": FunctionFragment;
    "eventRevenue(uint256)": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "eventsOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCategories(uint256)": FunctionFragment;
    "getEventsCount()": FunctionFragment;
    "getPrices(uint256)": FunctionFragment;
    "getTicket(uint256)": FunctionFragment;
    "getTicketLimited(uint256)": FunctionFragment;
    "getTicketOwner(address,uint256)": FunctionFragment;
    "getTktQnty(uint256)": FunctionFragment;
    "getTktQntySold(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isWhiteListedToken(address)": FunctionFragment;
    "name()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "ticketIds()": FunctionFragment;
    "ticketsOf(address)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whiteListedToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addtoWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [
      {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "changeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "eventIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eventsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketLimited",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTktQnty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTktQntySold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhiteListedToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketIds", values?: undefined): string;
  encodeFunctionData(functionFragment: "ticketsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListedToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addtoWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketLimited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTktQnty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTktQntySold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteListedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticketsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListedToken",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CreatedEvent(address,uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SoldTicketDetails1(tuple)": EventFragment;
    "SoldTicketDetails2(tuple,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldTicketDetails1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldTicketDetails2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DaoEventsV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DaoEventsV2Interface;

  functions: {
    addtoWhiteList(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addtoWhiteList(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTicket(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "buyTicket((uint256,uint256,string),address)"(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createEvent(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createEvent((bool,bool,bool,bool,address,uint256,uint256,uint256,string,string,string,string,string,bool[],uint256[],uint256[],uint256[],string[]))"(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    eventIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "eventIds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "eventRevenue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumber;
        totalQuantity: BigNumber;
        totalQntySold: BigNumber;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
      }
    >;

    "events(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumber;
        totalQuantity: BigNumber;
        totalQntySold: BigNumber;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
      }
    >;

    eventsOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "eventsOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getCategories(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEventsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEventsCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getPrices(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTicket(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, string] & {
          eventId: BigNumber;
          seatNo: BigNumber;
          boughtLocation: string;
          eventLocation: string;
        }
      ] & {
        _ticket: [BigNumber, BigNumber, string, string] & {
          eventId: BigNumber;
          seatNo: BigNumber;
          boughtLocation: string;
          eventLocation: string;
        };
      }
    >;

    "getTicket(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, string] & {
          eventId: BigNumber;
          seatNo: BigNumber;
          boughtLocation: string;
          eventLocation: string;
        }
      ] & {
        _ticket: [BigNumber, BigNumber, string, string] & {
          eventId: BigNumber;
          seatNo: BigNumber;
          boughtLocation: string;
          eventLocation: string;
        };
      }
    >;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    "getTicketLimited(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    getTicketOwner(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getTicketOwner(address,uint256)"(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getTktQnty(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "getTktQntySold(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhiteListedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhiteListedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    ticketIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ticketIds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketsOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "ticketsOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whiteListedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whiteListedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addtoWhiteList(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addtoWhiteList(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTicket(
    _buyTicket: {
      eventId: BigNumberish;
      categoryIndex: BigNumberish;
      boughtLocation: string;
    },
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "buyTicket((uint256,uint256,string),address)"(
    _buyTicket: {
      eventId: BigNumberish;
      categoryIndex: BigNumberish;
      boughtLocation: string;
    },
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createEvent(
    _event: {
      oneTimeBuy: boolean;
      token: boolean;
      onsite: boolean;
      isPHNX: boolean;
      owner: string;
      time: BigNumberish;
      totalQuantity: BigNumberish;
      totalQntySold: BigNumberish;
      name: string;
      topic: string;
      location: string;
      city: string;
      ipfsHash: string;
      ticketLimited: boolean[];
      tktQnty: BigNumberish[];
      prices: BigNumberish[];
      tktQntySold: BigNumberish[];
      categories: string[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createEvent((bool,bool,bool,bool,address,uint256,uint256,uint256,string,string,string,string,string,bool[],uint256[],uint256[],uint256[],string[]))"(
    _event: {
      oneTimeBuy: boolean;
      token: boolean;
      onsite: boolean;
      isPHNX: boolean;
      owner: string;
      time: BigNumberish;
      totalQuantity: BigNumberish;
      totalQntySold: BigNumberish;
      name: string;
      topic: string;
      location: string;
      city: string;
      ipfsHash: string;
      ticketLimited: boolean[];
      tktQnty: BigNumberish[];
      prices: BigNumberish[];
      tktQntySold: BigNumberish[];
      categories: string[];
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  eventIds(overrides?: CallOverrides): Promise<BigNumber>;

  "eventIds()"(overrides?: CallOverrides): Promise<BigNumber>;

  eventRevenue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "eventRevenue(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  events(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string
    ] & {
      oneTimeBuy: boolean;
      token: boolean;
      onsite: boolean;
      isPHNX: boolean;
      owner: string;
      time: BigNumber;
      totalQuantity: BigNumber;
      totalQntySold: BigNumber;
      name: string;
      topic: string;
      location: string;
      city: string;
      ipfsHash: string;
    }
  >;

  "events(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string
    ] & {
      oneTimeBuy: boolean;
      token: boolean;
      onsite: boolean;
      isPHNX: boolean;
      owner: string;
      time: BigNumber;
      totalQuantity: BigNumber;
      totalQntySold: BigNumber;
      name: string;
      topic: string;
      location: string;
      city: string;
      ipfsHash: string;
    }
  >;

  eventsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "eventsOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCategories(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getCategories(uint256)"(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getEventsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPrices(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getPrices(uint256)"(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTicket(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      eventId: BigNumber;
      seatNo: BigNumber;
      boughtLocation: string;
      eventLocation: string;
    }
  >;

  "getTicket(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      eventId: BigNumber;
      seatNo: BigNumber;
      boughtLocation: string;
      eventLocation: string;
    }
  >;

  getTicketLimited(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "getTicketLimited(uint256)"(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  getTicketOwner(
    _userAddress: string,
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getTicketOwner(address,uint256)"(
    _userAddress: string,
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTktQnty(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getTktQnty(uint256)"(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTktQntySold(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getTktQntySold(uint256)"(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhiteListedToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhiteListedToken(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    baseURI_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  ticketIds(overrides?: CallOverrides): Promise<BigNumber>;

  "ticketIds()"(overrides?: CallOverrides): Promise<BigNumber>;

  ticketsOf(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "ticketsOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  "tokenAddress()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whiteListedToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whiteListedToken(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addtoWhiteList(_token: string, overrides?: CallOverrides): Promise<void>;

    "addtoWhiteList(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyTicket((uint256,uint256,string),address)"(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "changeToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "createEvent((bool,bool,bool,bool,address,uint256,uint256,uint256,string,string,string,string,string,bool[],uint256[],uint256[],uint256[],string[]))"(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    eventIds(overrides?: CallOverrides): Promise<BigNumber>;

    "eventIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "eventRevenue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumber;
        totalQuantity: BigNumber;
        totalQntySold: BigNumber;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
      }
    >;

    "events(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string
      ] & {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumber;
        totalQuantity: BigNumber;
        totalQntySold: BigNumber;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
      }
    >;

    eventsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "eventsOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getCategories(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getEventsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getPrices(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTicket(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        eventId: BigNumber;
        seatNo: BigNumber;
        boughtLocation: string;
        eventLocation: string;
      }
    >;

    "getTicket(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        eventId: BigNumber;
        seatNo: BigNumber;
        boughtLocation: string;
        eventLocation: string;
      }
    >;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "getTicketLimited(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    getTicketOwner(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getTicketOwner(address,uint256)"(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTktQnty(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getTktQntySold(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhiteListedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhiteListedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    ticketIds(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsOf(owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "ticketsOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListedToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "whiteListedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    CreatedEvent(
      owner: string | null,
      eventId: null,
      undefined: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    SoldTicketDetails1(undefined: null): EventFilter;

    SoldTicketDetails2(undefined: null, owner: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    addtoWhiteList(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "addtoWhiteList(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "buyTicket((uint256,uint256,string),address)"(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "changeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createEvent(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createEvent((bool,bool,bool,bool,address,uint256,uint256,uint256,string,string,string,string,string,bool[],uint256[],uint256[],uint256[],string[]))"(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    eventIds(overrides?: CallOverrides): Promise<BigNumber>;

    "eventIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "eventRevenue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    events(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "events(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "eventsOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCategories(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEventsCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getEventsCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrices(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicket(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getTicket(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTicketLimited(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketOwner(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTicketOwner(address,uint256)"(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTktQnty(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTktQntySold(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhiteListedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhiteListedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBaseURI(baseURI_: string, overrides?: Overrides): Promise<BigNumber>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketIds(overrides?: CallOverrides): Promise<BigNumber>;

    "ticketIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    ticketsOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ticketsOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whiteListedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whiteListedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addtoWhiteList(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addtoWhiteList(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "buyTicket((uint256,uint256,string),address)"(
      _buyTicket: {
        eventId: BigNumberish;
        categoryIndex: BigNumberish;
        boughtLocation: string;
      },
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createEvent(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createEvent((bool,bool,bool,bool,address,uint256,uint256,uint256,string,string,string,string,string,bool[],uint256[],uint256[],uint256[],string[]))"(
      _event: {
        oneTimeBuy: boolean;
        token: boolean;
        onsite: boolean;
        isPHNX: boolean;
        owner: string;
        time: BigNumberish;
        totalQuantity: BigNumberish;
        totalQntySold: BigNumberish;
        name: string;
        topic: string;
        location: string;
        city: string;
        ipfsHash: string;
        ticketLimited: boolean[];
        tktQnty: BigNumberish[];
        prices: BigNumberish[];
        tktQntySold: BigNumberish[];
        categories: string[];
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    eventIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eventIds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventRevenue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "eventRevenue(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "events(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventsOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "eventsOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategories(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCategories(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEventsCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrices(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrices(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicket(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTicket(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketLimited(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTicketLimited(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketOwner(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTicketOwner(address,uint256)"(
      _userAddress: string,
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTktQnty(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTktQnty(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTktQntySold(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTktQntySold(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhiteListedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhiteListedToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      baseURI_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ticketIds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketsOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ticketsOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whiteListedToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whiteListedToken(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
